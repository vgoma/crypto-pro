{"version":3,"sources":["webpack:///0.crypto-pro.js","webpack:///./apiSync.js","webpack:///./common.js","webpack:///./constants.js","webpack:///./oids.js"],"names":["webpackJsonpcrypto_pro","module","exports","__webpack_require__","Certificate","item","this","_cert","thumbprint","subjectName","issuerName","validFrom","validTo","isValidEDSSettings","Promise","resolve","reject","cadesplugin","CreateObject","error","getCadesCert","hash","certs","certCnt","cert","oStore","Open","CAPICOM_CURRENT_USER_STORE","CAPICOM_MY_STORE","CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED","err","message","Certificates","Count","Find","CAPICOM_CERTIFICATE_FIND_SHA1_HASH","Error","Item","Close","getCertInfo","tags","propName","propInfo","cryptoCommon","parseCertInfo","getCertsList","resetCache","_certListCache","count","result","CAPICOM_CERTIFICATE_FIND_TIME_VALID","CAPICOM_CERTIFICATE_FIND_EXTENDED_PROPERTY","cryptoConstants","PropId","CAPICOM_PROPID_KEY_PROV_INFO","push","Thumbprint","SubjectName","IssuerName","ValidFromDate","ValidToDate","prepareCertsInfo","getCert","then","list","foundCert","some","signData","dataBase64","signType","Boolean","attrs","signature","clientTime","Date","oAttrs","oSignedData","oSigner","getDateObj","Name","Time","AUTHENTICATED_ATTRIBUTE_SIGNING_TIME","Value","AuthenticatedAttributes2","Add","ContentEncoding","CADESCOM_BASE64_TO_BINARY","Content","Options","CAPICOM_CERTIFICATE_INCLUDE_END_ENTITY_ONLY","SignCades","CADESCOM_CADES_BES","signDataXML","dataXML","signerXML","cnts","SignatureType","CADESCOM_XML_SIGNATURE_TYPE_ENVELOPED","SignatureMethod","GostXmlDSigUrls","XmlDsigGost3410Url","DigestMethod","XmlDsigGost3411Url","Sign","getSystemInfo","sysInfo","getEnvInfo","e","cadesVersion","PluginVersion","cspVersion","CSPVersion","Version","toString","isValidCSPVersion","version","isValidCadesVersion","prototype","isValid","IsValid","Result","getProp","exportBase64","base64","Export","getAlgorithm","algorithm","PublicKey","Algorithm","FriendlyName","oid","getOwnerInfo","call","subjectNameTagsTranslations","getIssuerInfo","issuerNameTagsTranslations","getExtendedKeyUsage","OIDS","ExtendedKeyUsage","EKUs","OID","getDecodedExtendedKeyUsage","hasExtendedKeyUsage","infoString","match","map","group","oidTitle","parts","title","descr","translated","test","oids","replace","tag","possibleNames","possible","translation","getReadableDate","date","getDate","getMonth","getFullYear","join","getHours","getMinutes","getSeconds","dateObj","bowser","msie","getVarDate","items","c","name","label","that","certOids","reduce","oidsLst","id","unshift","Array","isArray","every","oidToCheck","certOid","parsed","_detect","navigator","userAgent","info","browserName","browserVersion","mac","os","windows","linux","split","verInfo","number","i","major","minor","patch","StoreLocation","CAPICOM_MEMORY_STORE","CAPICOM_LOCAL_MACHINE_STORE","CAPICOM_ACTIVE_DIRECTORY_USER_STORE","CAPICOM_SMART_CARD_USER_STORE","StoreOpenMode","CAPICOM_STORE_OPEN_READ_ONLY","CAPICOM_STORE_OPEN_READ_WRITE","CAPICOM_STORE_OPEN_EXISTING_ONLY","CAPICOM_STORE_OPEN_INCLUDE_ARCHIVED","CertFindType","CAPICOM_CERTIFICATE_FIND_SUBJECT_NAME","CAPICOM_CERTIFICATE_FIND_ISSUER_NAME","CAPICOM_CERTIFICATE_FIND_ROOT_NAME","CAPICOM_CERTIFICATE_FIND_TEMPLATE_NAME","CAPICOM_CERTIFICATE_FIND_EXTENSION","CAPICOM_CERTIFICATE_FIND_APPLICATION_POLICY","CAPICOM_CERTIFICATE_FIND_CERTIFICATE_POLICY","CAPICOM_CERTIFICATE_FIND_TIME_NOT_YET_VALID","CAPICOM_CERTIFICATE_FIND_TIME_EXPIRED","CAPICOM_CERTIFICATE_FIND_KEY_USAGE","Check","CHECK_NONE","CHECK_TRUSTED_ROOT","CHECK_TIME_VALIDITY","CHECK_SIGNATURE_VALIDITY","CHECK_ONLINE_REVOCATION_STATUS","CHECK_OFFLINE_REVOCATION_STATUS","TRUST_IS_NOT_TIME_VALID","TRUST_IS_NOT_TIME_NESTED","TRUST_IS_REVOKED","TRUST_IS_NOT_SIGNATURE_VALID","TRUST_IS_NOT_VALID_FOR_USAGE","TRUST_IS_UNTRUSTED_ROOT","TRUST_REVOCATION_STATUS_UNKNOWN","TRUST_IS_CYCLIC","TRUST_IS_PARTIAL_CHAIN","TRUST_CTL_IS_NOT_TIME_VALID","TRUST_CTL_IS_NOT_SIGNATURE_VALID","TRUST_CTL_IS_NOT_VALID_FOR_USAGE","CAPICOM_PROPID_UNKNOWN","CAPICOM_PROPID_KEY_PROV_HANDLE","CAPICOM_PROPID_SHA1_HASH","CAPICOM_PROPID_HASH_PROP","CAPICOM_PROPID_MD5_HASH","CAPICOM_PROPID_KEY_CONTEXT","CAPICOM_PROPID_KEY_SPEC","CAPICOM_PROPID_IE30_RESERVED","CAPICOM_PROPID_PUBKEY_HASH_RESERVED","CAPICOM_PROPID_ENHKEY_USAGE","CAPICOM_PROPID_CTL_USAGE","CAPICOM_PROPID_NEXT_UPDATE_LOCATION","CAPICOM_PROPID_FRIENDLY_NAME","CAPICOM_PROPID_PVK_FILE","CAPICOM_PROPID_DESCRIPTION","CAPICOM_PROPID_ACCESS_STATE","CAPICOM_PROPID_SIGNATURE_HASH","CAPICOM_PROPID_SMART_CARD_DATA","CAPICOM_PROPID_EFS","CAPICOM_PROPID_FORTEZZA_DATA","CAPICOM_PROPID_ARCHIVED","CAPICOM_PROPID_KEY_IDENTIFIER","CAPICOM_PROPID_AUTO_ENROLL","CAPICOM_PROPID_PUBKEY_ALG_PARA","CAPICOM_PROPID_CROSS_CERT_DIST_POINTS","CAPICOM_PROPID_ISSUER_PUBLIC_KEY_MD5_HASH","CAPICOM_PROPID_SUBJECT_PUBLIC_KEY_MD5_HASH","CAPICOM_PROPID_ENROLLMENT","CAPICOM_PROPID_DATE_STAMP","CAPICOM_PROPID_ISSUER_SERIAL_NUMBER_MD5_HASH","CAPICOM_PROPID_SUBJECT_NAME_MD5_HASH","CAPICOM_PROPID_EXTENDED_ERROR_INFO","CAPICOM_PROPID_RENEWAL","CAPICOM_PROPID_ARCHIVED_KEY_HASH","CAPICOM_PROPID_FIRST_RESERVED","CAPICOM_PROPID_LAST_RESERVED","CAPICOM_PROPID_FIRST_USER","CAPICOM_PROPID_LAST_USER","CADESCOM_XML_SIGNATURE_TYPE_ENVELOPING","CADESCOM_XML_SIGNATURE_TYPE_TEMPLATE","HashAlgorithm","CADESCOM_HASH_ALGORITHM_CP_GOST_3411","CADESCOM_HASH_ALGORITHM_MD2","CADESCOM_HASH_ALGORITHM_MD4","CADESCOM_HASH_ALGORITHM_MD5","CADESCOM_HASH_ALGORITHM_SHA_256","CADESCOM_HASH_ALGORITHM_SHA_384","CADESCOM_HASH_ALGORITHM_SHA_512","CADESCOM_HASH_ALGORITHM_SHA1","CadesType","CADESCOM_CADES_DEFAULT","CADESCOM_CADES_X_LONG_TYPE_1","CADESCOM_STRING_TO_UCS2LE","StoreNames","Chain","CAPICOM_CERTIFICATE_INCLUDE_CHAIN_EXCEPT_ROOT","CAPICOM_CERTIFICATE_INCLUDE_WHOLE_CHAIN","XmlDsigGost3410UrlObsolete","XmlDsigGost3411UrlObsolete","1.2.840.113549.1.9.2","1.2.643.3.141.1.1","1.2.643.3.141.1.2","1.2.643.3.131.1.1","1.3.6.1.5.5.7.3.2","1.3.6.1.5.5.7.3.4","1.2.643.3.8.100.1","1.2.643.3.8.100.1.1","1.2.643.3.8.100.1.2","1.2.643.3.8.100.1.3","1.2.643.3.8.100.1.4","1.2.643.3.8.100.1.5","1.2.643.3.8.100.1.6","1.2.643.6.2.1.7.2","1.2.643.6.2.1.7.1","1.3.6.1.4.1.29919.21","1.2.643.3.2.100.65.13.11","1.2.643.3.8.100.1.7","1.2.643.3.8.100.1.8","1.2.643.3.8.100.1.9","1.2.643.3.8.100.1.10","1.2.643.3.8.100.1.11","1.2.643.3.8.100.1.12","1.2.643.3.8.100.1.13","1.3.6.1.4.1.24138.1.1.8.1","1.2.643.3.8.100.1.14","1.2.643.6.3","1.2.643.2.2.34.6","1.2.643.2.39.1.1","1.2.643.5.1.24.2.1.3","1.2.643.5.1.24.2.1.3.1","1.2.643.5.1.24.2.2.2","1.2.643.5.1.24.2.2.3","1.2.643.6.3.1.1","1.2.643.6.3.1.2.1","1.2.643.6.3.1.2.2","1.2.643.6.3.1.2.3","1.2.643.6.3.1.3.1","1.2.643.6.3.1.4.1","1.2.643.6.3.1.4.2","1.2.643.6.3.1.4.3","1.3.643.3.8.100.15"],"mappings":"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","file":"0.crypto-pro.js","sourcesContent":["webpackJsonpcrypto_pro([0],[\n/* 0 */,\n/* 1 */,\n/* 2 */,\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar cryptoCommon = __webpack_require__(6),\n    cryptoConstants = __webpack_require__(7),\n    _certListCache;\n\nfunction Certificate(item) {\n    this._cert = item._cert;\n    this.thumbprint = item.thumbprint;\n    this.subjectName = item.subjectName;\n    this.issuerName = item.issuerName;\n    this.validFrom = item.validFrom;\n    this.validTo = item.validTo;\n}\n\n/**\n * Проверяет, валиден ли сертификат\n * */\nCertificate.prototype.isValid = function isValid() {\n    var cert = this._cert;\n\n    return new Promise(function (resolve, reject) {\n        var result;\n\n        try {\n            result = cert.IsValid();\n            result = result.Result;\n        } catch (err) {\n            reject('Ошибка при проверке сертификата: ', err.message);\n            return;\n        }\n\n        resolve(result);\n    });\n};\n\n/**\n * Достает указанное свойство у сертификата\n * */\nCertificate.prototype.getProp = function (propName) {\n    var cert = this._cert;\n\n    return new Promise(function (resolve, reject) {\n        var result;\n\n        try {\n            result = cert[propName];\n        } catch (err) {\n            reject('Ошибка при обращении к свойству сертификата: ', err.message);\n            return;\n        }\n\n        resolve(result);\n    });\n};\n\n/**\n * Экспорт base64 представления сертификата пользователя\n * */\nCertificate.prototype.exportBase64 = function exportBase64() {\n    var cert = this._cert;\n\n    return new Promise(function (resolve, reject) {\n        var base64;\n\n        try {\n            base64 = cert.Export(0);\n        } catch (err) {\n            reject('Ошибка при экспорте сертификата: ', err.message);\n            return;\n        }\n\n        resolve(base64);\n    });\n};\n\n/**\n * Возвращает информацию об алгоритме\n * */\nCertificate.prototype.getAlgorithm = function getAlgorithm() {\n    var cert = this._cert;\n\n    return new Promise(function (resolve, reject) {\n        var result = {},\n            algorithm;\n\n        try {\n            algorithm = cert.PublicKey();\n            algorithm = algorithm.Algorithm;\n\n            result.algorithm = algorithm.FriendlyName;\n            result.oid = algorithm.Value;\n        } catch (err) {\n            reject('Ошибка при получении алгоритма: ', err.message);\n            return;\n        }\n\n        resolve(result);\n    });\n};\n\n/**\n * Разбирает SubjectName сертификата по тэгам\n * */\nCertificate.prototype.getOwnerInfo = function getOwnerInfo() {\n    return getCertInfo.call(this, cryptoCommon.subjectNameTagsTranslations, 'SubjectName');\n};\n\n/**\n * Разбирает IssuerName сертификата по тэгам\n * */\nCertificate.prototype.getIssuerInfo = function getIssuerInfo() {\n    return getCertInfo.call(this, cryptoCommon.issuerNameTagsTranslations, 'IssuerName');\n};\n\n/**\n * Получение OID сертификата\n * Возвращает массив OID (улучшенного ключа)\n * */\nCertificate.prototype.getExtendedKeyUsage = function getExtendedKeyUsage() {\n    var cert = this._cert;\n\n    return new Promise(function (resolve, reject) {\n        var OIDS = [],\n            count,\n            item;\n\n        try {\n            count = cert.ExtendedKeyUsage();\n            count = count.EKUs;\n            count = count.Count;\n\n            if (count > 0) {\n                while (count > 0) {\n                    item = cert.ExtendedKeyUsage();\n                    item = item.EKUs;\n                    item = item.Item(count);\n                    item = item.OID;\n\n                    OIDS.push(item);\n\n                    count--;\n                }\n            }\n        } catch (err) {\n            reject('Ошибка при получении ОИД\\'ов: ', err.message);\n            return;\n        }\n\n        resolve(OIDS);\n    });\n};\n\nCertificate.prototype.getDecodedExtendedKeyUsage = cryptoCommon.getDecodedExtendedKeyUsage;\n\nCertificate.prototype.hasExtendedKeyUsage = cryptoCommon.hasExtendedKeyUsage;\n\n/**\n * Проверяет корректность настроек ЭП на машине\n * */\nfunction isValidEDSSettings() {\n    return new Promise(function (resolve, reject) {\n        var result;\n\n        try {\n            result = cadesplugin.CreateObject('CAdESCOM.About');\n        } catch (error) {\n            reject('Настройки ЭП на данной машине не верны');\n        }\n\n        resolve();\n    });\n}\n\n/**\n * Получить сертификат в формате cades по хэшу\n * */\nfunction getCadesCert(hash) {\n    return new Promise(function (resolve, reject) {\n        var oStore = cadesplugin.CreateObject('CAdESCOM.Store'),\n            certs,\n            certCnt,\n            cert;\n\n        if (!oStore) {\n            reject('Не удалось получить доступ к хранилищу сертификатов');\n            return;\n        }\n\n        // Открываем хранилище\n        try {\n            oStore.Open(cadesplugin.CAPICOM_CURRENT_USER_STORE, cadesplugin.CAPICOM_MY_STORE, cadesplugin.CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED);\n        } catch (err) {\n            reject('Ошибка при открытии хранилища: ' + err.message);\n            return;\n        }\n\n        // Получаем доступ к сертификатам\n        try {\n            certs = oStore.Certificates;\n            certCnt = certs.Count;\n        } catch (err) {\n            reject('Ошибка получения списка сертификатов: ' + err.message);\n            return;\n        }\n\n        if (!certCnt) {\n            reject('Нет доступных сертификатов');\n            return;\n        }\n\n        // Получаем сертификат по хэшу\n        try {\n            certs = certs.Find(cadesplugin.CAPICOM_CERTIFICATE_FIND_SHA1_HASH, hash);\n\n            if (certs.Count) {\n                cert = certs.Item(1);\n            } else {\n                throw new Error(hash);\n            }\n        } catch (err) {\n            reject('Не удалось получить сертификат по хэшу: ' + err.message);\n            return;\n        }\n\n        oStore.Close();\n\n        resolve(cert);\n    });\n}\n\n/**\n * Разбирает информацию сертификата по тэгам\n * */\nfunction getCertInfo(tags, propName) {\n    var cert = this._cert;\n\n    return new Promise(function (resolve, reject) {\n        var propInfo;\n\n        try {\n            propInfo = cert[propName];\n        } catch (err) {\n            reject('Ошибка при извлечении данных из сертификата: ', err.message);\n            return;\n        }\n\n        resolve(cryptoCommon.parseCertInfo(tags, propInfo));\n    });\n}\n\n/**\n * Возвращает список сертификатов, доступных в системе\n *\n * @param {Boolean} [resetCache=false] -- нужно ли сбросить кэш списка сертификатов\n * @returns {Promise} -- со списком сертификатов {Array}\n * */\nfunction getCertsList(resetCache) {\n    return new Promise(function (resolve, reject) {\n        if (!resetCache && _certListCache) {\n            resolve(_certListCache);\n            return;\n        }\n\n        var oStore = cadesplugin.CreateObject('CAdESCOM.Store'),\n            result = [],\n            certs,\n            count,\n            item;\n\n        // Открываем хранилище\n        try {\n            oStore.Open(cadesplugin.CAPICOM_CURRENT_USER_STORE, cadesplugin.CAPICOM_MY_STORE, cadesplugin.CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED);\n        } catch (err) {\n            reject('Ошибка при открытии хранилища: ' + err.message);\n            return;\n        }\n\n        // Получаем доступ к сертификатам\n        try {\n            certs = oStore.Certificates;\n\n            if (certs) {\n                certs = certs.Find(cadesplugin.CAPICOM_CERTIFICATE_FIND_TIME_VALID);\n                /**\n                 * Не рассматриваются сертификаты, в которых отсутствует закрытый ключ\n                 * или не действительны на данный момент\n                 * */\n                certs = certs.Find(cadesplugin.CAPICOM_CERTIFICATE_FIND_EXTENDED_PROPERTY, cryptoConstants.PropId.CAPICOM_PROPID_KEY_PROV_INFO);\n\n                count = certs.Count;\n            }\n        } catch (err) {\n            reject('Ошибка получения списка сертификатов: ' + err.message);\n            return;\n        }\n\n        if (!count) {\n            reject('Нет доступных сертификатов');\n            return;\n        }\n\n        try {\n            while (count) {\n                item = certs.Item(count);\n\n                result.push(new Certificate({\n                    _cert: item,\n                    thumbprint: item.Thumbprint,\n                    subjectName: item.SubjectName,\n                    issuerName: item.IssuerName,\n                    validFrom: item.ValidFromDate,\n                    validTo: item.ValidToDate\n                }));\n\n                count--;\n            }\n        } catch (err) {\n            reject('Ошибка обработки сертификатов: ' + err.message);\n            return;\n        }\n\n        oStore.Close();\n\n        _certListCache = cryptoCommon.prepareCertsInfo(result);\n\n        resolve(_certListCache);\n    });\n}\n\n/**\n * Получить сертификат по хэшу\n * */\nfunction getCert(hash) {\n    return new Promise(function (resolve, reject) {\n        if (!hash) {\n            reject('Хэш не указан');\n            return;\n        }\n\n        getCertsList().then(function (list) {\n            var foundCert;\n\n            list.some(function (cert) {\n                if (hash === cert.thumbprint) {\n                    foundCert = cert;\n                    return true;\n                }\n            });\n\n            if (foundCert) {\n                resolve(foundCert);\n            } else {\n                reject('Сертификат с хэшем: \"' + hash + '\" не найден');\n            }\n        }, reject);\n    });\n}\n\n/**\n * Создает подпись base64 строки по hash'у сертификата\n *\n * @param {String} hash -- fingerprint (thumbprint) сертификата\n * @param {String} dataBase64 -- строковые данные в формате base64\n * @param {Boolean} signType -- тип подписи открепленная (true) / присоединенная (false) (default: true)\n * @returns {Promise} -- обещание, которое зарезолвится с данными о подписи {String}\n * */\nfunction signData(hash, dataBase64, signType) {\n    signType = typeof signType === 'undefined' ? true : Boolean(signType);\n\n    return new Promise(function (resolve, reject) {\n        getCadesCert(hash).then(function (cert) {\n            var clientTime = new Date(),\n                oAttrs = cadesplugin.CreateObject('CADESCOM.CPAttribute'),\n                oSignedData = cadesplugin.CreateObject('CAdESCOM.CadesSignedData'),\n                oSigner = cadesplugin.CreateObject('CAdESCOM.CPSigner'),\n                attrs,\n                signature;\n\n            clientTime = cryptoCommon.getDateObj(clientTime);\n\n            try {\n                oAttrs.Name = cryptoConstants.Time.AUTHENTICATED_ATTRIBUTE_SIGNING_TIME;\n                oAttrs.Value = clientTime;\n            } catch (err) {\n                reject('Ошибка при установке данных подписи: ' + err.message);\n                return;\n            }\n\n            // Задаем настройки для подписи\n            try {\n                oSigner.Certificate = cert;\n                attrs = oSigner.AuthenticatedAttributes2;\n                attrs.Add(oAttrs);\n                oSignedData.ContentEncoding = cadesplugin.CADESCOM_BASE64_TO_BINARY;\n                oSignedData.Content = dataBase64;\n                oSigner.Options = cadesplugin.CAPICOM_CERTIFICATE_INCLUDE_END_ENTITY_ONLY;\n            } catch (err) {\n                reject('Не удалось установить настройки для подписи: ' + err.message);\n                return;\n            }\n\n            try {\n                signature = oSignedData.SignCades(oSigner, cadesplugin.CADESCOM_CADES_BES, signType);\n            } catch (err) {\n                reject('Не удалось создать подпись: ' + err.message);\n                return;\n            }\n\n            resolve(signature);\n        }, reject);\n    });\n}\n\n/**\n * Создает подпись XML строки по hash'у сертификата\n *\n * @param {String} hash -- fingerprint (thumbprint) сертификата\n * @param {String} dataXML -- данные в формате XML\n * @returns {Promise} -- обещание, которое зарезолвится с данными о подписи {String}\n * */\nfunction signDataXML(hash, dataXML) {\n    return new Promise(function (resolve, reject) {\n        getCadesCert(hash).then(function (cert) {\n            var oSigner = cadesplugin.CreateObject('CAdESCOM.CPSigner'),\n                signerXML = cadesplugin.CreateObject('CAdESCOM.SignedXML'),\n                cnts = cryptoConstants,\n                signature;\n\n            // Задаем настройки для подписи\n            try {\n                oSigner.Certificate = cert;\n                // Добавляем данные для подписи\n                signerXML.Content = dataXML;\n                // Устанавливаем тип подписи\n                signerXML.SignatureType = cnts.SignatureType.CADESCOM_XML_SIGNATURE_TYPE_ENVELOPED;\n                // Устанавливаем алгоритм подписи\n                signerXML.SignatureMethod = cnts.GostXmlDSigUrls.XmlDsigGost3410Url;\n                // Устанавливаем алгоритм хэширования\n                signerXML.DigestMethod = cnts.GostXmlDSigUrls.XmlDsigGost3411Url;\n            } catch (err) {\n                reject('Не удалось установить настройки для подписи: ' + err.message);\n                return;\n            }\n\n            try {\n                signature = signerXML.Sign(oSigner);\n            } catch (err) {\n                reject('Не удалось создать подпись: ' + err.message);\n                return;\n            }\n\n            resolve(signature);\n        }, reject);\n    });\n}\n\n/**\n * Возвращает информацию о версии CSP и плагина\n * */\nfunction getSystemInfo() {\n    var sysInfo = cryptoCommon.getEnvInfo();\n\n    return new Promise(function (resolve, reject) {\n        var e;\n\n        try {\n            e = cadesplugin.CreateObject('CAdESCOM.About');\n\n            sysInfo.cadesVersion = e.PluginVersion;\n            // Возможен вызов в ранних версиях в виде sysInfo.cspVersion = e.CSPVersion('', 75);\n            sysInfo.cspVersion = e.CSPVersion();\n\n            if (!sysInfo.cadesVersion) {\n                sysInfo.cadesVersion = e.Version;\n            }\n\n            sysInfo.cadesVersion = sysInfo.cadesVersion.toString();\n            sysInfo.cspVersion = sysInfo.cspVersion.toString();\n\n            resolve(sysInfo);\n        } catch (err) {\n            reject('Ошибка при получении информации о системе: ', err.message);\n        }\n    });\n}\n\n/**\n * Promise обертка для синхронного вызова проверки версии CSP\n * */\nfunction isValidCSPVersion(version) {\n    return new Promise(function (resolve) {\n        resolve(cryptoCommon.isValidCSPVersion(version));\n    });\n}\n\n/**\n * Promise обертка для синхронного вызова проверки версии плагина\n * */\nfunction isValidCadesVersion(version) {\n    return new Promise(function (resolve) {\n        resolve(cryptoCommon.isValidCadesVersion(version));\n    });\n}\n\nmodule.exports = {\n    isValidEDSSettings: isValidEDSSettings,\n    getCertsList: getCertsList,\n    getCert: getCert,\n    signData: signData,\n    signDataXML: signDataXML,\n    getSystemInfo: getSystemInfo,\n    isValidCSPVersion: isValidCSPVersion,\n    isValidCadesVersion: isValidCadesVersion\n};\n\n/***/ }),\n/* 4 */,\n/* 5 */,\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar bowser = __webpack_require__(0);\nvar oids = __webpack_require__(8);\n\nvar subjectNameTagsTranslations = [{ possibleNames: ['UnstructuredName'], translation: 'Неструктурированное имя' }, { possibleNames: ['CN'], translation: 'Владелец' }, { possibleNames: ['SN'], translation: 'Фамилия' }, { possibleNames: ['G'], translation: 'Имя Отчество' }, { possibleNames: ['C'], translation: 'Страна' }, { possibleNames: ['S'], translation: 'Регион' }, { possibleNames: ['STREET'], translation: 'Адрес' }, { possibleNames: ['O'], translation: 'Компания' }, { possibleNames: ['OU'], translation: 'Отдел/подразделение' }, { possibleNames: ['T'], translation: 'Должность' }, { possibleNames: ['ОГРН', 'OGRN'], translation: 'ОГРН' }, { possibleNames: ['ОГРНИП', 'OGRNIP'], translation: 'ОГРНИП' }, { possibleNames: ['СНИЛС', 'SNILS'], translation: 'СНИЛС' }, { possibleNames: ['ИНН', 'INN'], translation: 'ИНН' }, { possibleNames: ['E'], translation: 'Email' }, { possibleNames: ['L'], translation: 'Город' }],\n    issuerNameTagsTranslations = [{ possibleNames: ['UnstructuredName'], translation: 'Неструктурированное имя' }, { possibleNames: ['CN'], translation: 'Удостоверяющий центр' }, { possibleNames: ['S'], translation: 'Регион' }, { possibleNames: ['C'], translation: 'Страна' }, { possibleNames: ['STREET'], translation: 'Адрес' }, { possibleNames: ['O'], translation: 'Компания' }, { possibleNames: ['OU'], translation: 'Тип' }, { possibleNames: ['T'], translation: 'Должность' }, { possibleNames: ['ОГРН', 'OGRN'], translation: 'ОГРН' }, { possibleNames: ['ОГРНИП', 'OGRNIP'], translation: 'ОГРНИП' }, { possibleNames: ['СНИЛС', 'SNILS'], translation: 'СНИЛС' }, { possibleNames: ['ИНН', 'INN'], translation: 'ИНН' }, { possibleNames: ['E'], translation: 'Email' }, { possibleNames: ['L'], translation: 'Город' }];\n\n/**\n * Парсит информацию из строки с информацией о сертификате\n * */\nfunction parseCertInfo(tags, infoString) {\n    /**\n     * Пример входной строки:\n     *\n      T=Генеральный директор, UnstructuredName=\"INN=7811514257/KPP=781101001/OGRN=1127847087884\",\n     STREET=\"Крыленко, д.3, лит.Б\", CN=Король Анатолий Евгеньевич, G=Анатолий Евгеньевич, SN=Король,\n     OU=Администрация, O=\"ООО \"\"Аксиома\"\"\", L=Санкт-Петербург, S=78 г. Санкт-Петербург, C=RU, E=korol@sferasro.ru,\n     INN=007811514257, OGRN=1127847087884, SNILS=11617693460\n      * */\n    var result = infoString.match(/([а-яА-Яa-zA-Z0-9\\.]+)=(?:(\"[^\"]+?\")|(.+?))(?:,|$)/g);\n\n    if (result) {\n        result = result.map(function (group) {\n            /**\n             * Пример входной строки:\n             *\n              UnstructuredName=\"INN=7811514257/KPP=781101001/OGRN=1127847087884\",\n              * */\n            var parts = group.match(/^([а-яА-Яa-zA-Z0-9\\.]+)=(.+?),?$/),\n                title = parts && parts[1],\n                descr = parts && parts[2],\n                translated = false,\n                oidTitle;\n\n            // Если тайтл содержит ОИД, пытаемся расшифровать\n            if (/^OID./.test(title)) {\n                oidTitle = title.match(/^OID\\.(.*)/);\n\n                if (oidTitle && oidTitle[1]) {\n                    oidTitle = oids[oidTitle[1]];\n\n                    if (oidTitle) {\n                        title = oidTitle;\n                    }\n                }\n            }\n\n            // Вырезаем лишние кавычки\n            descr = descr.replace(/^\"(.*)\"/, '$1');\n            descr = descr.replace(/\"{2}/g, '\"');\n\n            tags.some(function (tag) {\n                return tag.possibleNames.some(function (possible) {\n                    var match = possible === title;\n\n                    if (match) {\n                        title = tag.translation;\n                        translated = true;\n                    }\n\n                    return match;\n                });\n            });\n\n            return {\n                title: title,\n                descr: descr,\n                translated: translated\n            };\n        });\n    }\n\n    return result;\n}\n\n/**\n * Возвращает дату в формате (dd.mm.yyyy hh:mm:ss) из строки, формата, используемого плагином cryptoPro\n * */\nfunction getReadableDate(date) {\n    date = new Date(date);\n\n    return ([date.getDate(), date.getMonth() + 1, date.getFullYear()].join('.') + ' ' + [date.getHours(), date.getMinutes(), date.getSeconds()].join(':')).replace(/\\b(\\d)\\b/g, '0$1');\n}\n\n/**\n * Преобразует дату для IE\n * */\nfunction getDateObj(dateObj) {\n    return bowser.msie ? dateObj.getVarDate() : dateObj;\n}\n\n/**\n * Подготавливает информацию о сертификатах\n * */\nfunction prepareCertsInfo(items) {\n    return items.map(function (c) {\n        c.name = c.subjectName.match(/CN=(.+?),/);\n\n        // Удалось ли вытащить Common Name\n        if (c.name && c.name[1]) {\n            c.name = c.name[1];\n        }\n\n        c.validFrom = getReadableDate(c.validFrom);\n        c.validTo = getReadableDate(c.validTo);\n\n        c.label = c.name + ' (до ' + c.validTo + ')';\n\n        return c;\n    });\n}\n\n/**\n * Возвращает расшифрованные ОИД'ы\n * */\nfunction getDecodedExtendedKeyUsage() {\n    var that = this;\n\n    return new Promise(function (resolve) {\n        that.getExtendedKeyUsage().then(function (certOids) {\n            resolve(certOids.reduce(function (oidsLst, oid) {\n                oid = {\n                    id: oid,\n                    descr: oids[oid] || null\n                };\n\n                if (oid.descr) {\n                    oidsLst.unshift(oid);\n                } else {\n                    oidsLst.push(oid);\n                }\n\n                return oidsLst;\n            }, []));\n        });\n    });\n}\n\n/**\n * Проверка наличия ОИД'а(ОИД'ов) у сертификата\n *\n * @param {String|Array} oids - ОИД'ы для проверки\n * @returns {Promise} с отложенным результатом типа {Boolean}\n * */\nfunction hasExtendedKeyUsage(oids) {\n    var that = this;\n\n    return new Promise(function (resolve) {\n        that.getExtendedKeyUsage().then(function (certOids) {\n            var result;\n\n            if (Array.isArray(oids)) {\n                result = oids.every(function (oidToCheck) {\n                    return certOids.some(function (certOid) {\n                        return certOid === oidToCheck;\n                    });\n                });\n            } else {\n                result = certOids.some(function (certOid) {\n                    return certOid === oids;\n                });\n            }\n\n            resolve(result);\n        });\n    });\n}\n\n/**\n * Выводит информацию о системе пользователя\n * */\nfunction getEnvInfo() {\n    var parsed = bowser._detect(navigator.userAgent),\n        info = {\n        browserName: parsed.name,\n        browserVersion: parsed.version\n    };\n\n    if (parsed.mac) {\n        info.os = 'Mac';\n    } else if (parsed.windows) {\n        info.os = 'Windows';\n    } else if (parsed.linux) {\n        info.os = 'Linux';\n    }\n\n    return info;\n}\n\n/**\n * Подходящая ли версия CSP\n * */\nfunction isValidCSPVersion(version) {\n    version = version.match(/\\d+?\\b(?:\\.\\d+)?/);\n\n    return version >= 3.6;\n}\n\n/**\n * Подходящая ли версия cades плагина\n * */\nfunction isValidCadesVersion(version) {\n    version = version.split('.').reduce(function (verInfo, number, i) {\n        if (i === 0) {\n            verInfo.major = number;\n        } else if (i === 1) {\n            verInfo.minor = number;\n        } else if (i === 2) {\n            verInfo.patch = number;\n        }\n\n        return verInfo;\n    }, {});\n\n    if (version.major < 2) {\n        return false;\n    }\n\n    return version.patch >= 12438;\n}\n\nmodule.exports = {\n    subjectNameTagsTranslations: subjectNameTagsTranslations,\n    issuerNameTagsTranslations: issuerNameTagsTranslations,\n    parseCertInfo: parseCertInfo,\n    getReadableDate: getReadableDate,\n    getDateObj: getDateObj,\n    prepareCertsInfo: prepareCertsInfo,\n    getDecodedExtendedKeyUsage: getDecodedExtendedKeyUsage,\n    hasExtendedKeyUsage: hasExtendedKeyUsage,\n    getEnvInfo: getEnvInfo,\n    isValidCSPVersion: isValidCSPVersion,\n    isValidCadesVersion: isValidCadesVersion\n};\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports) {\n\nmodule.exports = {\n    // CAPICOM_STORE_LOCATION enumeration\n    StoreLocation: {\n        CAPICOM_MEMORY_STORE: 0,\n        CAPICOM_LOCAL_MACHINE_STORE: 1,\n        CAPICOM_CURRENT_USER_STORE: 2,\n        CAPICOM_ACTIVE_DIRECTORY_USER_STORE: 3,\n        CAPICOM_SMART_CARD_USER_STORE: 4\n    },\n    // CAPICOM_STORE_OPEN_MODE enumeration\n    StoreOpenMode: {\n        CAPICOM_STORE_OPEN_READ_ONLY: 0,\n        CAPICOM_STORE_OPEN_READ_WRITE: 1,\n        CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED: 2,\n        CAPICOM_STORE_OPEN_EXISTING_ONLY: 128,\n        CAPICOM_STORE_OPEN_INCLUDE_ARCHIVED: 256\n    },\n    // CAPICOM_CERTIFICATE_FIND_TYPE enumeration\n    CertFindType: {\n        CAPICOM_CERTIFICATE_FIND_SHA1_HASH: 0,\n        CAPICOM_CERTIFICATE_FIND_SUBJECT_NAME: 1,\n        CAPICOM_CERTIFICATE_FIND_ISSUER_NAME: 2,\n        CAPICOM_CERTIFICATE_FIND_ROOT_NAME: 3,\n        CAPICOM_CERTIFICATE_FIND_TEMPLATE_NAME: 4,\n        CAPICOM_CERTIFICATE_FIND_EXTENSION: 5,\n        CAPICOM_CERTIFICATE_FIND_EXTENDED_PROPERTY: 6,\n        CAPICOM_CERTIFICATE_FIND_APPLICATION_POLICY: 7,\n        CAPICOM_CERTIFICATE_FIND_CERTIFICATE_POLICY: 8,\n        CAPICOM_CERTIFICATE_FIND_TIME_VALID: 9,\n        CAPICOM_CERTIFICATE_FIND_TIME_NOT_YET_VALID: 10,\n        CAPICOM_CERTIFICATE_FIND_TIME_EXPIRED: 11,\n        CAPICOM_CERTIFICATE_FIND_KEY_USAGE: 12\n    },\n    Time: {\n        AUTHENTICATED_ATTRIBUTE_SIGNING_TIME: 0\n    },\n    Check: {\n        CHECK_NONE: 0,\n        CHECK_TRUSTED_ROOT: 1,\n        CHECK_TIME_VALIDITY: 2,\n        CHECK_SIGNATURE_VALIDITY: 4,\n        CHECK_ONLINE_REVOCATION_STATUS: 8,\n        CHECK_OFFLINE_REVOCATION_STATUS: 16,\n        TRUST_IS_NOT_TIME_VALID: 1,\n        TRUST_IS_NOT_TIME_NESTED: 2,\n        TRUST_IS_REVOKED: 4,\n        TRUST_IS_NOT_SIGNATURE_VALID: 8,\n        TRUST_IS_NOT_VALID_FOR_USAGE: 16,\n        TRUST_IS_UNTRUSTED_ROOT: 32,\n        TRUST_REVOCATION_STATUS_UNKNOWN: 64,\n        TRUST_IS_CYCLIC: 128,\n        TRUST_IS_PARTIAL_CHAIN: 65536,\n        TRUST_CTL_IS_NOT_TIME_VALID: 131072,\n        TRUST_CTL_IS_NOT_SIGNATURE_VALID: 262144,\n        TRUST_CTL_IS_NOT_VALID_FOR_USAGE: 524288\n    },\n    // CAPICOM_PROPID enumeration\n    PropId: {\n        CAPICOM_PROPID_UNKNOWN: 0,\n        CAPICOM_PROPID_KEY_PROV_HANDLE: 1,\n        CAPICOM_PROPID_KEY_PROV_INFO: 2,\n        CAPICOM_PROPID_SHA1_HASH: 3,\n        CAPICOM_PROPID_HASH_PROP: 3,\n        CAPICOM_PROPID_MD5_HASH: 4,\n        CAPICOM_PROPID_KEY_CONTEXT: 5,\n        CAPICOM_PROPID_KEY_SPEC: 6,\n        CAPICOM_PROPID_IE30_RESERVED: 7,\n        CAPICOM_PROPID_PUBKEY_HASH_RESERVED: 8,\n        CAPICOM_PROPID_ENHKEY_USAGE: 9,\n        CAPICOM_PROPID_CTL_USAGE: 9,\n        CAPICOM_PROPID_NEXT_UPDATE_LOCATION: 10,\n        CAPICOM_PROPID_FRIENDLY_NAME: 11,\n        CAPICOM_PROPID_PVK_FILE: 12,\n        CAPICOM_PROPID_DESCRIPTION: 13,\n        CAPICOM_PROPID_ACCESS_STATE: 14,\n        CAPICOM_PROPID_SIGNATURE_HASH: 15,\n        CAPICOM_PROPID_SMART_CARD_DATA: 16,\n        CAPICOM_PROPID_EFS: 17,\n        CAPICOM_PROPID_FORTEZZA_DATA: 18,\n        CAPICOM_PROPID_ARCHIVED: 19,\n        CAPICOM_PROPID_KEY_IDENTIFIER: 20,\n        CAPICOM_PROPID_AUTO_ENROLL: 21,\n        CAPICOM_PROPID_PUBKEY_ALG_PARA: 22,\n        CAPICOM_PROPID_CROSS_CERT_DIST_POINTS: 23,\n        CAPICOM_PROPID_ISSUER_PUBLIC_KEY_MD5_HASH: 24,\n        CAPICOM_PROPID_SUBJECT_PUBLIC_KEY_MD5_HASH: 25,\n        CAPICOM_PROPID_ENROLLMENT: 26,\n        CAPICOM_PROPID_DATE_STAMP: 27,\n        CAPICOM_PROPID_ISSUER_SERIAL_NUMBER_MD5_HASH: 28,\n        CAPICOM_PROPID_SUBJECT_NAME_MD5_HASH: 29,\n        CAPICOM_PROPID_EXTENDED_ERROR_INFO: 30,\n        CAPICOM_PROPID_RENEWAL: 64,\n        CAPICOM_PROPID_ARCHIVED_KEY_HASH: 65,\n        CAPICOM_PROPID_FIRST_RESERVED: 66,\n        CAPICOM_PROPID_LAST_RESERVED: 0x00007FFF,\n        CAPICOM_PROPID_FIRST_USER: 0x00008000,\n        CAPICOM_PROPID_LAST_USER: 0x0000FFFF\n    },\n    // CADESCOM_XML_SIGNATURE_TYPE enumeration\n    SignatureType: {\n        CADESCOM_XML_SIGNATURE_TYPE_ENVELOPED: 0,\n        CADESCOM_XML_SIGNATURE_TYPE_ENVELOPING: 1,\n        CADESCOM_XML_SIGNATURE_TYPE_TEMPLATE: 2\n    },\n    // CADESCOM_HASH_ALGORITHM enumeration\n    HashAlgorithm: {\n        CADESCOM_HASH_ALGORITHM_CP_GOST_3411: 100,\n        CADESCOM_HASH_ALGORITHM_MD2: 1,\n        CADESCOM_HASH_ALGORITHM_MD4: 2,\n        CADESCOM_HASH_ALGORITHM_MD5: 3,\n        CADESCOM_HASH_ALGORITHM_SHA_256: 4,\n        CADESCOM_HASH_ALGORITHM_SHA_384: 5,\n        CADESCOM_HASH_ALGORITHM_SHA_512: 6,\n        CADESCOM_HASH_ALGORITHM_SHA1: 0\n    },\n    CadesType: {\n        CADESCOM_CADES_DEFAULT: 0,\n        CADESCOM_CADES_BES: 1,\n        CADESCOM_CADES_X_LONG_TYPE_1: 0x5d\n    },\n    ContentEncoding: {\n        CADESCOM_BASE64_TO_BINARY: 0x01,\n        CADESCOM_STRING_TO_UCS2LE: 0x00\n    },\n    StoreNames: {\n        CAPICOM_MY_STORE: 'My'\n    },\n    Chain: {\n        CAPICOM_CERTIFICATE_INCLUDE_CHAIN_EXCEPT_ROOT: 0,\n        CAPICOM_CERTIFICATE_INCLUDE_WHOLE_CHAIN: 1,\n        CAPICOM_CERTIFICATE_INCLUDE_END_ENTITY_ONLY: 2\n    },\n    GostXmlDSigUrls: {\n        XmlDsigGost3410Url: 'urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34102001-gostr3411',\n        XmlDsigGost3411Url: 'urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr3411',\n        XmlDsigGost3410UrlObsolete: 'http://www.w3.org/2001/04/xmldsig-more#gostr34102001-gostr3411',\n        XmlDsigGost3411UrlObsolete: 'http://www.w3.org/2001/04/xmldsig-more#gostr3411'\n    }\n};\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports) {\n\nmodule.exports = {\n    '1.2.840.113549.1.9.2': 'Неструктурированное имя',\n    '1.2.643.3.141.1.1': 'РНС ФСС',\n    '1.2.643.3.141.1.2': 'КП ФСС',\n    '1.2.643.3.131.1.1': 'ИНН',\n    '1.3.6.1.5.5.7.3.2': 'Проверка подлинности клиента',\n    '1.3.6.1.5.5.7.3.4': 'Защищенная электронная почта',\n    '1.2.643.3.8.100.1': 'Сертификат типа \"ekey-ГОСТ\"',\n    '1.2.643.3.8.100.1.1': 'Общее использование в системах ИОК без права заверения финансовых документов',\n    '1.2.643.3.8.100.1.2': 'Передача отчетности по ТКС',\n    '1.2.643.3.8.100.1.3': 'Оформление взаимных обязательств, соглашений, договоров, актов и т.п.',\n    '1.2.643.3.8.100.1.4': 'Внутрикорпоративный документооборот',\n    '1.2.643.3.8.100.1.5': 'Использование в системах электронной торговли',\n    '1.2.643.3.8.100.1.6': 'Использование в торгово-закупочной системе \"ЭЛЕКТРА\"',\n    '1.2.643.6.2.1.7.2': 'Использование физическим лицом в отношениях, связанных с возникновением, исполнением (осуществлением) и прекращением гражданских прав и обязанностей в отношении инвестиционных паев паевых инвестиционных фондов, в том числе отношения, связанные с учетом и/или фиксацией прав на инвестиционные паи паевых инвестиционных фондов',\n    '1.2.643.6.2.1.7.1': 'Использование единоличным исполнительным органом юридического лица или уполномоченными представителями юридического лица в отношениях, связанных с возникновением, исполнением (осуществлением) и прекращением гражданских и иных прав и обязанностей в сфере негосударственного пенсионного обеспечения, негосударственного пенсионного страхования, в сфере деятельности паевых инвестиционных фондов, акционерных инвестиционных фондов, профессиональных участников рынка ценных бумаг, а также связанной с обслуживанием указанной деятельности услуг кредитных и иных организаций',\n    '1.3.6.1.4.1.29919.21': 'Использование в системе Портал государственных закупок  Ростовской области \"Рефери\".',\n    '1.2.643.3.2.100.65.13.11': 'Использование в системе АИС \"Госзакупки\" Сахалинской области.',\n    '1.2.643.3.8.100.1.7': 'Использование в системе Портал государственных закупок Ставропольского края.',\n    '1.2.643.3.8.100.1.8': 'Использование в Единой системе электронной торговли B2B-Center и B2G.',\n    '1.2.643.3.8.100.1.9': 'Для участия в электронных торгах и подписания государственного контракта в  электронной площадке ОАО «ЕЭТП» уполномоченными лицами участников размещения  государственного или муниципального заказа',\n    '1.2.643.3.8.100.1.10': 'Для участия в электронных торгах и подписания государственного контракта в  информационных системах Тендерного комитета города Москвы уполномоченными  лицами участников размещения государственного заказа города Москвы',\n    '1.2.643.3.8.100.1.11': 'Подписание электронных документов в автоматизированной информационной  системе размещения государственного и муниципального заказа Саратовской области',\n    '1.2.643.3.8.100.1.12': 'Использование в системе государственного заказа Иркутской области',\n    '1.2.643.3.8.100.1.13': 'Использование в электронной торговой площадке агентства государственного  заказа Красноярского края',\n    '1.3.6.1.4.1.24138.1.1.8.1': 'Обеспечение юридической значимости в Системе \"Электронная Торговая Площадка\"',\n    '1.2.643.3.8.100.1.14': 'Использование в электронной торговой площадке \"Тендер\"',\n    '1.2.643.6.3': 'Использование в электронных торговых системах и в программном обеспечении, связанным с обменом электронных сообщений',\n    '1.2.643.2.2.34.6': 'Пользователь Центра Регистрации',\n    '1.2.643.2.39.1.1': 'Использование в программных продуктах системы \"1С:Предприятие 8\"',\n    '1.2.643.5.1.24.2.1.3': 'Формирование документов для получения государственных  услуг в сфере ведения государственного кадастра недвижимости со стороны заявителя',\n    '1.2.643.5.1.24.2.1.3.1': 'Формирование кадастровым инженером документов  для получения государственных услуг в сфере ведения государственного кадастра недвижимости со стороны  заявителя',\n    '1.2.643.5.1.24.2.2.2': 'Формирование документов как результата оказания  услуги со стороны органов регистрации прав',\n    '1.2.643.5.1.24.2.2.3': 'Формирование документов для получения государственных  услуг в сфере государственной регистрации прав на недвижимое имущество и сделок с ним со стороны заявителя',\n    '1.2.643.6.3.1.1': 'Использование на электронных площадок отобранных для проведения аукционах в электронной форме',\n    '1.2.643.6.3.1.2.1': 'Тип участника - Юридическое лицо',\n    '1.2.643.6.3.1.2.2': 'Тип участника - Физическое лицо',\n    '1.2.643.6.3.1.2.3': 'Тип участника - Индивидуальный предприниматель',\n    '1.2.643.6.3.1.3.1': 'Участник размещения заказа',\n    '1.2.643.6.3.1.4.1': 'Администратор организации',\n    '1.2.643.6.3.1.4.2': 'Уполномоченный специалист',\n    '1.2.643.6.3.1.4.3': 'Специалист с правом подписи контракта',\n    '1.3.643.3.8.100.15': 'Использование в ЭТП \"uTender\"'\n};\n\n/***/ })\n]);\n\n\n// WEBPACK FOOTER //\n// 0.crypto-pro.js","var cryptoCommon = require('./common'),\n    cryptoConstants = require('./constants'),\n    _certListCache;\n\nfunction Certificate(item) {\n    this._cert = item._cert;\n    this.thumbprint = item.thumbprint;\n    this.subjectName = item.subjectName;\n    this.issuerName = item.issuerName;\n    this.validFrom = item.validFrom;\n    this.validTo = item.validTo;\n}\n\n/**\n * Проверяет, валиден ли сертификат\n * */\nCertificate.prototype.isValid = function isValid() {\n    var cert = this._cert;\n\n    return new Promise(function (resolve, reject) {\n        var result;\n\n        try {\n            result = cert.IsValid();\n            result = result.Result;\n        } catch (err) {\n            reject('Ошибка при проверке сертификата: ', err.message);\n            return;\n        }\n\n        resolve(result);\n    });\n};\n\n/**\n * Достает указанное свойство у сертификата\n * */\nCertificate.prototype.getProp = function (propName) {\n    var cert = this._cert;\n\n    return new Promise(function (resolve, reject) {\n        var result;\n\n        try {\n            result = cert[propName];\n        } catch (err) {\n            reject('Ошибка при обращении к свойству сертификата: ', err.message);\n            return;\n        }\n\n        resolve(result);\n    });\n};\n\n/**\n * Экспорт base64 представления сертификата пользователя\n * */\nCertificate.prototype.exportBase64 = function exportBase64() {\n    var cert = this._cert;\n\n    return new Promise(function (resolve, reject) {\n        var base64;\n\n        try {\n            base64 = cert.Export(0);\n        } catch (err) {\n            reject('Ошибка при экспорте сертификата: ', err.message);\n            return;\n        }\n\n        resolve(base64);\n    });\n};\n\n/**\n * Возвращает информацию об алгоритме\n * */\nCertificate.prototype.getAlgorithm = function getAlgorithm() {\n    var cert = this._cert;\n\n    return new Promise(function (resolve, reject) {\n        var result = {},\n            algorithm;\n\n        try {\n            algorithm = cert.PublicKey();\n            algorithm = algorithm.Algorithm;\n\n            result.algorithm = algorithm.FriendlyName;\n            result.oid = algorithm.Value;\n        } catch (err) {\n            reject('Ошибка при получении алгоритма: ', err.message);\n            return;\n        }\n\n        resolve(result);\n    });\n};\n\n/**\n * Разбирает SubjectName сертификата по тэгам\n * */\nCertificate.prototype.getOwnerInfo = function getOwnerInfo() {\n    return getCertInfo.call(this, cryptoCommon.subjectNameTagsTranslations, 'SubjectName');\n};\n\n/**\n * Разбирает IssuerName сертификата по тэгам\n * */\nCertificate.prototype.getIssuerInfo = function getIssuerInfo() {\n    return getCertInfo.call(this, cryptoCommon.issuerNameTagsTranslations, 'IssuerName');\n};\n\n/**\n * Получение OID сертификата\n * Возвращает массив OID (улучшенного ключа)\n * */\nCertificate.prototype.getExtendedKeyUsage = function getExtendedKeyUsage() {\n    var cert = this._cert;\n\n    return new Promise(function (resolve, reject) {\n        var OIDS = [],\n            count,\n            item;\n\n        try {\n            count = cert.ExtendedKeyUsage();\n            count = count.EKUs;\n            count = count.Count;\n\n            if (count > 0) {\n                while (count > 0) {\n                    item = cert.ExtendedKeyUsage();\n                    item = item.EKUs;\n                    item = item.Item(count);\n                    item = item.OID;\n\n                    OIDS.push(item);\n\n                    count--;\n                }\n            }\n        } catch (err) {\n            reject('Ошибка при получении ОИД\\'ов: ', err.message);\n            return;\n        }\n\n        resolve(OIDS);\n    });\n};\n\nCertificate.prototype.getDecodedExtendedKeyUsage = cryptoCommon.getDecodedExtendedKeyUsage;\n\nCertificate.prototype.hasExtendedKeyUsage = cryptoCommon.hasExtendedKeyUsage;\n\n/**\n * Проверяет корректность настроек ЭП на машине\n * */\nfunction isValidEDSSettings() {\n    return new Promise(function (resolve, reject) {\n        var result;\n\n        try {\n            result = cadesplugin.CreateObject('CAdESCOM.About');\n        } catch (error) {\n            reject('Настройки ЭП на данной машине не верны');\n        }\n\n        resolve();\n    });\n}\n\n/**\n * Получить сертификат в формате cades по хэшу\n * */\nfunction getCadesCert(hash) {\n    return new Promise(function (resolve, reject) {\n        var oStore = cadesplugin.CreateObject('CAdESCOM.Store'),\n            certs,\n            certCnt,\n            cert;\n\n        if (!oStore) {\n            reject('Не удалось получить доступ к хранилищу сертификатов');\n            return;\n        }\n\n        // Открываем хранилище\n        try {\n            oStore.Open(\n                cadesplugin.CAPICOM_CURRENT_USER_STORE,\n                cadesplugin.CAPICOM_MY_STORE,\n                cadesplugin.CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED\n            );\n        } catch (err) {\n            reject('Ошибка при открытии хранилища: ' + err.message);\n            return;\n        }\n\n        // Получаем доступ к сертификатам\n        try {\n            certs = oStore.Certificates;\n            certCnt = certs.Count;\n        } catch (err) {\n            reject('Ошибка получения списка сертификатов: ' + err.message);\n            return;\n        }\n\n        if (!certCnt) {\n            reject('Нет доступных сертификатов');\n            return;\n        }\n\n        // Получаем сертификат по хэшу\n        try {\n            certs = certs.Find(cadesplugin.CAPICOM_CERTIFICATE_FIND_SHA1_HASH, hash);\n\n            if (certs.Count) {\n                cert = certs.Item(1);\n            } else {\n                throw new Error(hash);\n            }\n        } catch (err) {\n            reject('Не удалось получить сертификат по хэшу: ' + err.message);\n            return;\n        }\n\n        oStore.Close();\n\n        resolve(cert);\n    });\n}\n\n/**\n * Разбирает информацию сертификата по тэгам\n * */\nfunction getCertInfo(tags, propName) {\n    var cert = this._cert;\n\n    return new Promise(function (resolve, reject) {\n        var propInfo;\n\n        try {\n            propInfo = cert[propName];\n        } catch (err) {\n            reject('Ошибка при извлечении данных из сертификата: ', err.message);\n            return;\n        }\n\n        resolve(cryptoCommon.parseCertInfo(tags, propInfo));\n    });\n}\n\n/**\n * Возвращает список сертификатов, доступных в системе\n *\n * @param {Boolean} [resetCache=false] -- нужно ли сбросить кэш списка сертификатов\n * @returns {Promise} -- со списком сертификатов {Array}\n * */\nfunction getCertsList(resetCache) {\n    return new Promise(function (resolve, reject) {\n        if (!resetCache && _certListCache) {\n            resolve(_certListCache);\n            return;\n        }\n\n        var oStore = cadesplugin.CreateObject('CAdESCOM.Store'),\n            result = [],\n            certs,\n            count,\n            item;\n\n        // Открываем хранилище\n        try {\n            oStore.Open(\n                cadesplugin.CAPICOM_CURRENT_USER_STORE,\n                cadesplugin.CAPICOM_MY_STORE,\n                cadesplugin.CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED\n            );\n        } catch (err) {\n            reject('Ошибка при открытии хранилища: ' + err.message);\n            return;\n        }\n\n        // Получаем доступ к сертификатам\n        try {\n            certs = oStore.Certificates;\n\n            if (certs) {\n                certs = certs.Find(cadesplugin.CAPICOM_CERTIFICATE_FIND_TIME_VALID);\n                /**\n                 * Не рассматриваются сертификаты, в которых отсутствует закрытый ключ\n                 * или не действительны на данный момент\n                 * */\n                certs = certs.Find(\n                    cadesplugin.CAPICOM_CERTIFICATE_FIND_EXTENDED_PROPERTY,\n                    cryptoConstants.PropId.CAPICOM_PROPID_KEY_PROV_INFO\n                );\n\n                count = certs.Count;\n            }\n        } catch (err) {\n            reject('Ошибка получения списка сертификатов: ' + err.message);\n            return;\n        }\n\n        if (!count) {\n            reject('Нет доступных сертификатов');\n            return;\n        }\n\n        try {\n            while (count) {\n                item = certs.Item(count);\n\n                result.push(new Certificate({\n                    _cert: item,\n                    thumbprint: item.Thumbprint,\n                    subjectName: item.SubjectName,\n                    issuerName: item.IssuerName,\n                    validFrom: item.ValidFromDate,\n                    validTo: item.ValidToDate\n                }));\n\n                count--;\n            }\n        } catch (err) {\n            reject('Ошибка обработки сертификатов: ' + err.message);\n            return;\n        }\n\n        oStore.Close();\n\n        _certListCache = cryptoCommon.prepareCertsInfo(result);\n\n        resolve(_certListCache);\n    });\n}\n\n/**\n * Получить сертификат по хэшу\n * */\nfunction getCert(hash) {\n    return new Promise(function (resolve, reject) {\n        if (!hash) {\n            reject('Хэш не указан');\n            return;\n        }\n\n        getCertsList().then(function (list) {\n            var foundCert;\n\n            list.some(function (cert) {\n                if (hash === cert.thumbprint) {\n                    foundCert = cert;\n                    return true;\n                }\n            });\n\n            if (foundCert) {\n                resolve(foundCert);\n            } else {\n                reject('Сертификат с хэшем: \"' + hash + '\" не найден');\n            }\n        }, reject);\n    });\n}\n\n/**\n * Создает подпись base64 строки по hash'у сертификата\n *\n * @param {String} hash -- fingerprint (thumbprint) сертификата\n * @param {String} dataBase64 -- строковые данные в формате base64\n * @param {Boolean} signType -- тип подписи открепленная (true) / присоединенная (false) (default: true)\n * @returns {Promise} -- обещание, которое зарезолвится с данными о подписи {String}\n * */\nfunction signData(hash, dataBase64, signType) {\n    signType = typeof signType === 'undefined' ? true : Boolean(signType);\n\n    return new Promise(function (resolve, reject) {\n        getCadesCert(hash).then(function (cert) {\n            var clientTime = new Date(),\n                oAttrs = cadesplugin.CreateObject('CADESCOM.CPAttribute'),\n                oSignedData = cadesplugin.CreateObject('CAdESCOM.CadesSignedData'),\n                oSigner = cadesplugin.CreateObject('CAdESCOM.CPSigner'),\n                attrs,\n                signature;\n\n            clientTime = cryptoCommon.getDateObj(clientTime);\n\n            try {\n                oAttrs.Name = cryptoConstants.Time.AUTHENTICATED_ATTRIBUTE_SIGNING_TIME;\n                oAttrs.Value = clientTime;\n            } catch (err) {\n                reject('Ошибка при установке данных подписи: ' + err.message);\n                return;\n            }\n\n            // Задаем настройки для подписи\n            try {\n                oSigner.Certificate = cert;\n                attrs = oSigner.AuthenticatedAttributes2;\n                attrs.Add(oAttrs);\n                oSignedData.ContentEncoding = cadesplugin.CADESCOM_BASE64_TO_BINARY;\n                oSignedData.Content = dataBase64;\n                oSigner.Options = cadesplugin.CAPICOM_CERTIFICATE_INCLUDE_END_ENTITY_ONLY;\n            } catch (err) {\n                reject('Не удалось установить настройки для подписи: ' + err.message);\n                return;\n            }\n\n            try {\n                signature = oSignedData.SignCades(\n                    oSigner,\n                    cadesplugin.CADESCOM_CADES_BES,\n                    signType\n                );\n            } catch (err) {\n                reject('Не удалось создать подпись: ' + err.message);\n                return;\n            }\n\n            resolve(signature);\n        }, reject);\n    });\n}\n\n/**\n * Создает подпись XML строки по hash'у сертификата\n *\n * @param {String} hash -- fingerprint (thumbprint) сертификата\n * @param {String} dataXML -- данные в формате XML\n * @returns {Promise} -- обещание, которое зарезолвится с данными о подписи {String}\n * */\nfunction signDataXML(hash, dataXML) {\n    return new Promise(function (resolve, reject) {\n        getCadesCert(hash).then(function (cert) {\n            var oSigner = cadesplugin.CreateObject('CAdESCOM.CPSigner'),\n                signerXML = cadesplugin.CreateObject('CAdESCOM.SignedXML'),\n                cnts = cryptoConstants,\n                signature;\n\n            // Задаем настройки для подписи\n            try {\n                oSigner.Certificate = cert;\n                // Добавляем данные для подписи\n                signerXML.Content = dataXML;\n                // Устанавливаем тип подписи\n                signerXML.SignatureType = cnts.SignatureType.CADESCOM_XML_SIGNATURE_TYPE_ENVELOPED;\n                // Устанавливаем алгоритм подписи\n                signerXML.SignatureMethod = cnts.GostXmlDSigUrls.XmlDsigGost3410Url;\n                // Устанавливаем алгоритм хэширования\n                signerXML.DigestMethod = cnts.GostXmlDSigUrls.XmlDsigGost3411Url;\n            } catch (err) {\n                reject('Не удалось установить настройки для подписи: ' + err.message);\n                return;\n            }\n\n            try {\n                signature = signerXML.Sign(oSigner);\n            } catch (err) {\n                reject('Не удалось создать подпись: ' + err.message);\n                return;\n            }\n\n            resolve(signature);\n        }, reject);\n    });\n}\n\n/**\n * Возвращает информацию о версии CSP и плагина\n * */\nfunction getSystemInfo() {\n    var sysInfo = cryptoCommon.getEnvInfo();\n\n    return new Promise(function (resolve, reject) {\n        var e;\n\n        try {\n            e = cadesplugin.CreateObject('CAdESCOM.About');\n\n            sysInfo.cadesVersion = e.PluginVersion;\n            // Возможен вызов в ранних версиях в виде sysInfo.cspVersion = e.CSPVersion('', 75);\n            sysInfo.cspVersion = e.CSPVersion();\n\n            if (!sysInfo.cadesVersion) {\n                sysInfo.cadesVersion = e.Version;\n            }\n\n            sysInfo.cadesVersion = sysInfo.cadesVersion.toString();\n            sysInfo.cspVersion = sysInfo.cspVersion.toString();\n\n            resolve(sysInfo);\n        } catch (err) {\n            reject('Ошибка при получении информации о системе: ', err.message);\n        }\n    });\n}\n\n/**\n * Promise обертка для синхронного вызова проверки версии CSP\n * */\nfunction isValidCSPVersion(version) {\n    return new Promise(function (resolve) {\n        resolve(cryptoCommon.isValidCSPVersion(version));\n    });\n}\n\n/**\n * Promise обертка для синхронного вызова проверки версии плагина\n * */\nfunction isValidCadesVersion(version) {\n    return new Promise(function (resolve) {\n        resolve(cryptoCommon.isValidCadesVersion(version));\n    });\n}\n\nmodule.exports = {\n    isValidEDSSettings: isValidEDSSettings,\n    getCertsList: getCertsList,\n    getCert: getCert,\n    signData: signData,\n    signDataXML: signDataXML,\n    getSystemInfo: getSystemInfo,\n    isValidCSPVersion: isValidCSPVersion,\n    isValidCadesVersion: isValidCadesVersion\n};\n\n\n// WEBPACK FOOTER //\n// ./apiSync.js","var bowser = require('bowser/bowser');\nvar oids = require('./oids');\n\nvar subjectNameTagsTranslations = [\n        {possibleNames: ['UnstructuredName'], translation: 'Неструктурированное имя'},\n        {possibleNames: ['CN'], translation: 'Владелец'},\n        {possibleNames: ['SN'], translation: 'Фамилия'},\n        {possibleNames: ['G'], translation: 'Имя Отчество'},\n        {possibleNames: ['C'], translation: 'Страна'},\n        {possibleNames: ['S'], translation: 'Регион'},\n        {possibleNames: ['STREET'], translation: 'Адрес'},\n        {possibleNames: ['O'], translation: 'Компания'},\n        {possibleNames: ['OU'], translation: 'Отдел/подразделение'},\n        {possibleNames: ['T'], translation: 'Должность'},\n        {possibleNames: ['ОГРН', 'OGRN'], translation: 'ОГРН'},\n        {possibleNames: ['ОГРНИП', 'OGRNIP'], translation: 'ОГРНИП'},\n        {possibleNames: ['СНИЛС', 'SNILS'], translation: 'СНИЛС'},\n        {possibleNames: ['ИНН', 'INN'], translation: 'ИНН'},\n        {possibleNames: ['E'], translation: 'Email'},\n        {possibleNames: ['L'], translation: 'Город'}\n    ],\n\n    issuerNameTagsTranslations = [\n        {possibleNames: ['UnstructuredName'], translation: 'Неструктурированное имя'},\n        {possibleNames: ['CN'], translation: 'Удостоверяющий центр'},\n        {possibleNames: ['S'], translation: 'Регион'},\n        {possibleNames: ['C'], translation: 'Страна'},\n        {possibleNames: ['STREET'], translation: 'Адрес'},\n        {possibleNames: ['O'], translation: 'Компания'},\n        {possibleNames: ['OU'], translation: 'Тип'},\n        {possibleNames: ['T'], translation: 'Должность'},\n        {possibleNames: ['ОГРН', 'OGRN'], translation: 'ОГРН'},\n        {possibleNames: ['ОГРНИП', 'OGRNIP'], translation: 'ОГРНИП'},\n        {possibleNames: ['СНИЛС', 'SNILS'], translation: 'СНИЛС'},\n        {possibleNames: ['ИНН', 'INN'], translation: 'ИНН'},\n        {possibleNames: ['E'], translation: 'Email'},\n        {possibleNames: ['L'], translation: 'Город'}\n    ];\n\n/**\n * Парсит информацию из строки с информацией о сертификате\n * */\nfunction parseCertInfo(tags, infoString) {\n    /**\n     * Пример входной строки:\n     *\n\n     T=Генеральный директор, UnstructuredName=\"INN=7811514257/KPP=781101001/OGRN=1127847087884\",\n     STREET=\"Крыленко, д.3, лит.Б\", CN=Король Анатолий Евгеньевич, G=Анатолий Евгеньевич, SN=Король,\n     OU=Администрация, O=\"ООО \"\"Аксиома\"\"\", L=Санкт-Петербург, S=78 г. Санкт-Петербург, C=RU, E=korol@sferasro.ru,\n     INN=007811514257, OGRN=1127847087884, SNILS=11617693460\n\n     * */\n    var result = infoString.match(/([а-яА-Яa-zA-Z0-9\\.]+)=(?:(\"[^\"]+?\")|(.+?))(?:,|$)/g);\n\n    if (result) {\n        result = result.map(function (group) {\n            /**\n             * Пример входной строки:\n             *\n\n             UnstructuredName=\"INN=7811514257/KPP=781101001/OGRN=1127847087884\",\n\n             * */\n            var parts = group.match(/^([а-яА-Яa-zA-Z0-9\\.]+)=(.+?),?$/),\n                title = parts && parts[1],\n                descr = parts && parts[2],\n                translated = false,\n                oidTitle;\n\n            // Если тайтл содержит ОИД, пытаемся расшифровать\n            if (/^OID./.test(title)) {\n                oidTitle = title.match(/^OID\\.(.*)/);\n\n                if (oidTitle && oidTitle[1]) {\n                    oidTitle = oids[oidTitle[1]];\n\n                    if (oidTitle) {\n                        title = oidTitle;\n                    }\n                }\n            }\n\n            // Вырезаем лишние кавычки\n            descr = descr.replace(/^\"(.*)\"/, '$1');\n            descr = descr.replace(/\"{2}/g, '\"');\n\n            tags.some(function (tag) {\n                return tag.possibleNames.some(function (possible) {\n                    var match = possible === title;\n\n                    if (match) {\n                        title = tag.translation;\n                        translated = true;\n                    }\n\n                    return match;\n                });\n            });\n\n            return {\n                title: title,\n                descr: descr,\n                translated: translated\n            };\n        });\n    }\n\n    return result;\n}\n\n/**\n * Возвращает дату в формате (dd.mm.yyyy hh:mm:ss) из строки, формата, используемого плагином cryptoPro\n * */\nfunction getReadableDate(date) {\n    date = new Date(date);\n\n    return ([\n        date.getDate(),\n        date.getMonth() + 1,\n        date.getFullYear()\n    ].join('.') + ' ' + [\n        date.getHours(),\n        date.getMinutes(),\n        date.getSeconds()\n    ].join(':')).replace(/\\b(\\d)\\b/g, '0$1');\n}\n\n/**\n * Преобразует дату для IE\n * */\nfunction getDateObj(dateObj) {\n    return bowser.msie ? dateObj.getVarDate() : dateObj;\n}\n\n/**\n * Подготавливает информацию о сертификатах\n * */\nfunction prepareCertsInfo(items) {\n    return items.map(function (c) {\n        c.name = c.subjectName.match(/CN=(.+?),/);\n\n        // Удалось ли вытащить Common Name\n        if (c.name && c.name[1]) {\n            c.name = c.name[1];\n        }\n\n        c.validFrom = getReadableDate(c.validFrom);\n        c.validTo = getReadableDate(c.validTo);\n\n        c.label = c.name + ' (до ' + c.validTo + ')';\n\n        return c;\n    });\n}\n\n/**\n * Возвращает расшифрованные ОИД'ы\n * */\nfunction getDecodedExtendedKeyUsage() {\n    var that = this;\n\n    return new Promise(function (resolve) {\n        that.getExtendedKeyUsage().then(function (certOids) {\n            resolve(certOids.reduce(function (oidsLst, oid) {\n                oid = {\n                    id: oid,\n                    descr: oids[oid] || null\n                };\n\n                if (oid.descr) {\n                    oidsLst.unshift(oid);\n                } else {\n                    oidsLst.push(oid);\n                }\n\n                return oidsLst;\n            }, []));\n        });\n    });\n}\n\n/**\n * Проверка наличия ОИД'а(ОИД'ов) у сертификата\n *\n * @param {String|Array} oids - ОИД'ы для проверки\n * @returns {Promise} с отложенным результатом типа {Boolean}\n * */\nfunction hasExtendedKeyUsage(oids) {\n    var that = this;\n\n    return new Promise(function (resolve) {\n        that.getExtendedKeyUsage().then(function (certOids) {\n            var result;\n\n            if (Array.isArray(oids)) {\n                result = oids.every(function (oidToCheck) {\n                    return certOids.some(function (certOid) {\n                        return certOid === oidToCheck;\n                    });\n                });\n            } else {\n                result = certOids.some(function (certOid) {\n                    return certOid === oids;\n                });\n            }\n\n            resolve(result);\n        });\n    });\n}\n\n/**\n * Выводит информацию о системе пользователя\n * */\nfunction getEnvInfo() {\n    var parsed = bowser._detect(navigator.userAgent),\n        info = {\n            browserName: parsed.name,\n            browserVersion: parsed.version\n        };\n\n    if (parsed.mac) {\n        info.os = 'Mac';\n    } else if (parsed.windows) {\n        info.os = 'Windows';\n    } else if (parsed.linux) {\n        info.os = 'Linux';\n    }\n\n    return info;\n}\n\n/**\n * Подходящая ли версия CSP\n * */\nfunction isValidCSPVersion(version) {\n    version = version.match(/\\d+?\\b(?:\\.\\d+)?/);\n\n    return version >= 3.6;\n}\n\n/**\n * Подходящая ли версия cades плагина\n * */\nfunction isValidCadesVersion(version) {\n    version = version.split('.').reduce(function (verInfo, number, i) {\n        if (i === 0) {\n            verInfo.major = number;\n        } else if (i === 1) {\n            verInfo.minor = number;\n        } else if (i === 2) {\n            verInfo.patch = number;\n        }\n\n        return verInfo;\n    }, {});\n\n    if (version.major < 2) {\n        return false;\n    }\n\n    return version.patch >= 12438;\n}\n\nmodule.exports = {\n    subjectNameTagsTranslations: subjectNameTagsTranslations,\n    issuerNameTagsTranslations: issuerNameTagsTranslations,\n    parseCertInfo: parseCertInfo,\n    getReadableDate: getReadableDate,\n    getDateObj: getDateObj,\n    prepareCertsInfo: prepareCertsInfo,\n    getDecodedExtendedKeyUsage: getDecodedExtendedKeyUsage,\n    hasExtendedKeyUsage: hasExtendedKeyUsage,\n    getEnvInfo: getEnvInfo,\n    isValidCSPVersion: isValidCSPVersion,\n    isValidCadesVersion: isValidCadesVersion\n};\n\n\n// WEBPACK FOOTER //\n// ./common.js","module.exports = {\n    // CAPICOM_STORE_LOCATION enumeration\n    StoreLocation: {\n        CAPICOM_MEMORY_STORE: 0,\n        CAPICOM_LOCAL_MACHINE_STORE: 1,\n        CAPICOM_CURRENT_USER_STORE: 2,\n        CAPICOM_ACTIVE_DIRECTORY_USER_STORE: 3,\n        CAPICOM_SMART_CARD_USER_STORE: 4\n    },\n    // CAPICOM_STORE_OPEN_MODE enumeration\n    StoreOpenMode: {\n        CAPICOM_STORE_OPEN_READ_ONLY: 0,\n        CAPICOM_STORE_OPEN_READ_WRITE: 1,\n        CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED: 2,\n        CAPICOM_STORE_OPEN_EXISTING_ONLY: 128,\n        CAPICOM_STORE_OPEN_INCLUDE_ARCHIVED: 256\n    },\n    // CAPICOM_CERTIFICATE_FIND_TYPE enumeration\n    CertFindType: {\n        CAPICOM_CERTIFICATE_FIND_SHA1_HASH: 0,\n        CAPICOM_CERTIFICATE_FIND_SUBJECT_NAME: 1,\n        CAPICOM_CERTIFICATE_FIND_ISSUER_NAME: 2,\n        CAPICOM_CERTIFICATE_FIND_ROOT_NAME: 3,\n        CAPICOM_CERTIFICATE_FIND_TEMPLATE_NAME: 4,\n        CAPICOM_CERTIFICATE_FIND_EXTENSION: 5,\n        CAPICOM_CERTIFICATE_FIND_EXTENDED_PROPERTY: 6,\n        CAPICOM_CERTIFICATE_FIND_APPLICATION_POLICY: 7,\n        CAPICOM_CERTIFICATE_FIND_CERTIFICATE_POLICY: 8,\n        CAPICOM_CERTIFICATE_FIND_TIME_VALID: 9,\n        CAPICOM_CERTIFICATE_FIND_TIME_NOT_YET_VALID: 10,\n        CAPICOM_CERTIFICATE_FIND_TIME_EXPIRED: 11,\n        CAPICOM_CERTIFICATE_FIND_KEY_USAGE: 12\n    },\n    Time: {\n        AUTHENTICATED_ATTRIBUTE_SIGNING_TIME: 0\n    },\n    Check: {\n        CHECK_NONE: 0,\n        CHECK_TRUSTED_ROOT: 1,\n        CHECK_TIME_VALIDITY: 2,\n        CHECK_SIGNATURE_VALIDITY: 4,\n        CHECK_ONLINE_REVOCATION_STATUS: 8,\n        CHECK_OFFLINE_REVOCATION_STATUS: 16,\n        TRUST_IS_NOT_TIME_VALID: 1,\n        TRUST_IS_NOT_TIME_NESTED: 2,\n        TRUST_IS_REVOKED: 4,\n        TRUST_IS_NOT_SIGNATURE_VALID: 8,\n        TRUST_IS_NOT_VALID_FOR_USAGE: 16,\n        TRUST_IS_UNTRUSTED_ROOT: 32,\n        TRUST_REVOCATION_STATUS_UNKNOWN: 64,\n        TRUST_IS_CYCLIC: 128,\n        TRUST_IS_PARTIAL_CHAIN: 65536,\n        TRUST_CTL_IS_NOT_TIME_VALID: 131072,\n        TRUST_CTL_IS_NOT_SIGNATURE_VALID: 262144,\n        TRUST_CTL_IS_NOT_VALID_FOR_USAGE: 524288,\n    },\n    // CAPICOM_PROPID enumeration\n    PropId: {\n        CAPICOM_PROPID_UNKNOWN: 0,\n        CAPICOM_PROPID_KEY_PROV_HANDLE: 1,\n        CAPICOM_PROPID_KEY_PROV_INFO: 2,\n        CAPICOM_PROPID_SHA1_HASH: 3,\n        CAPICOM_PROPID_HASH_PROP: 3,\n        CAPICOM_PROPID_MD5_HASH: 4,\n        CAPICOM_PROPID_KEY_CONTEXT: 5,\n        CAPICOM_PROPID_KEY_SPEC: 6,\n        CAPICOM_PROPID_IE30_RESERVED: 7,\n        CAPICOM_PROPID_PUBKEY_HASH_RESERVED: 8,\n        CAPICOM_PROPID_ENHKEY_USAGE: 9,\n        CAPICOM_PROPID_CTL_USAGE: 9,\n        CAPICOM_PROPID_NEXT_UPDATE_LOCATION: 10,\n        CAPICOM_PROPID_FRIENDLY_NAME: 11,\n        CAPICOM_PROPID_PVK_FILE: 12,\n        CAPICOM_PROPID_DESCRIPTION: 13,\n        CAPICOM_PROPID_ACCESS_STATE: 14,\n        CAPICOM_PROPID_SIGNATURE_HASH: 15,\n        CAPICOM_PROPID_SMART_CARD_DATA: 16,\n        CAPICOM_PROPID_EFS: 17,\n        CAPICOM_PROPID_FORTEZZA_DATA: 18,\n        CAPICOM_PROPID_ARCHIVED: 19,\n        CAPICOM_PROPID_KEY_IDENTIFIER: 20,\n        CAPICOM_PROPID_AUTO_ENROLL: 21,\n        CAPICOM_PROPID_PUBKEY_ALG_PARA: 22,\n        CAPICOM_PROPID_CROSS_CERT_DIST_POINTS: 23,\n        CAPICOM_PROPID_ISSUER_PUBLIC_KEY_MD5_HASH: 24,\n        CAPICOM_PROPID_SUBJECT_PUBLIC_KEY_MD5_HASH: 25,\n        CAPICOM_PROPID_ENROLLMENT: 26,\n        CAPICOM_PROPID_DATE_STAMP: 27,\n        CAPICOM_PROPID_ISSUER_SERIAL_NUMBER_MD5_HASH: 28,\n        CAPICOM_PROPID_SUBJECT_NAME_MD5_HASH: 29,\n        CAPICOM_PROPID_EXTENDED_ERROR_INFO: 30,\n        CAPICOM_PROPID_RENEWAL: 64,\n        CAPICOM_PROPID_ARCHIVED_KEY_HASH: 65,\n        CAPICOM_PROPID_FIRST_RESERVED: 66,\n        CAPICOM_PROPID_LAST_RESERVED: 0x00007FFF,\n        CAPICOM_PROPID_FIRST_USER: 0x00008000,\n        CAPICOM_PROPID_LAST_USER: 0x0000FFFF\n    },\n    // CADESCOM_XML_SIGNATURE_TYPE enumeration\n    SignatureType: {\n        CADESCOM_XML_SIGNATURE_TYPE_ENVELOPED: 0,\n        CADESCOM_XML_SIGNATURE_TYPE_ENVELOPING: 1,\n        CADESCOM_XML_SIGNATURE_TYPE_TEMPLATE: 2\n    },\n    // CADESCOM_HASH_ALGORITHM enumeration\n    HashAlgorithm: {\n        CADESCOM_HASH_ALGORITHM_CP_GOST_3411: 100,\n        CADESCOM_HASH_ALGORITHM_MD2: 1,\n        CADESCOM_HASH_ALGORITHM_MD4: 2,\n        CADESCOM_HASH_ALGORITHM_MD5: 3,\n        CADESCOM_HASH_ALGORITHM_SHA_256: 4,\n        CADESCOM_HASH_ALGORITHM_SHA_384: 5,\n        CADESCOM_HASH_ALGORITHM_SHA_512: 6,\n        CADESCOM_HASH_ALGORITHM_SHA1: 0\n    },\n    CadesType: {\n        CADESCOM_CADES_DEFAULT: 0,\n        CADESCOM_CADES_BES: 1,\n        CADESCOM_CADES_X_LONG_TYPE_1: 0x5d\n    },\n    ContentEncoding: {\n        CADESCOM_BASE64_TO_BINARY: 0x01,\n        CADESCOM_STRING_TO_UCS2LE: 0x00\n    },\n    StoreNames: {\n        CAPICOM_MY_STORE: 'My'\n    },\n    Chain: {\n        CAPICOM_CERTIFICATE_INCLUDE_CHAIN_EXCEPT_ROOT: 0,\n        CAPICOM_CERTIFICATE_INCLUDE_WHOLE_CHAIN: 1,\n        CAPICOM_CERTIFICATE_INCLUDE_END_ENTITY_ONLY: 2\n    },\n    GostXmlDSigUrls: {\n        XmlDsigGost3410Url: 'urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34102001-gostr3411',\n        XmlDsigGost3411Url: 'urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr3411',\n        XmlDsigGost3410UrlObsolete: 'http://www.w3.org/2001/04/xmldsig-more#gostr34102001-gostr3411',\n        XmlDsigGost3411UrlObsolete: 'http://www.w3.org/2001/04/xmldsig-more#gostr3411'\n    }\n};\n\n\n// WEBPACK FOOTER //\n// ./constants.js","module.exports = {\n    '1.2.840.113549.1.9.2': 'Неструктурированное имя',\n    '1.2.643.3.141.1.1': 'РНС ФСС',\n    '1.2.643.3.141.1.2': 'КП ФСС',\n    '1.2.643.3.131.1.1': 'ИНН',\n    '1.3.6.1.5.5.7.3.2': 'Проверка подлинности клиента',\n    '1.3.6.1.5.5.7.3.4': 'Защищенная электронная почта',\n    '1.2.643.3.8.100.1': 'Сертификат типа \"ekey-ГОСТ\"',\n    '1.2.643.3.8.100.1.1': 'Общее использование в системах ИОК без права заверения финансовых документов',\n    '1.2.643.3.8.100.1.2': 'Передача отчетности по ТКС',\n    '1.2.643.3.8.100.1.3': 'Оформление взаимных обязательств, соглашений, договоров, актов и т.п.',\n    '1.2.643.3.8.100.1.4': 'Внутрикорпоративный документооборот',\n    '1.2.643.3.8.100.1.5': 'Использование в системах электронной торговли',\n    '1.2.643.3.8.100.1.6': 'Использование в торгово-закупочной системе \"ЭЛЕКТРА\"',\n    '1.2.643.6.2.1.7.2': 'Использование физическим лицом в отношениях, связанных с возникновением, исполнением (осуществлением) и прекращением гражданских прав и обязанностей в отношении инвестиционных паев паевых инвестиционных фондов, в том числе отношения, связанные с учетом и/или фиксацией прав на инвестиционные паи паевых инвестиционных фондов',\n    '1.2.643.6.2.1.7.1': 'Использование единоличным исполнительным органом юридического лица или уполномоченными представителями юридического лица в отношениях, связанных с возникновением, исполнением (осуществлением) и прекращением гражданских и иных прав и обязанностей в сфере негосударственного пенсионного обеспечения, негосударственного пенсионного страхования, в сфере деятельности паевых инвестиционных фондов, акционерных инвестиционных фондов, профессиональных участников рынка ценных бумаг, а также связанной с обслуживанием указанной деятельности услуг кредитных и иных организаций',\n    '1.3.6.1.4.1.29919.21': 'Использование в системе Портал государственных закупок  Ростовской области \"Рефери\".',\n    '1.2.643.3.2.100.65.13.11': 'Использование в системе АИС \"Госзакупки\" Сахалинской области.',\n    '1.2.643.3.8.100.1.7': 'Использование в системе Портал государственных закупок Ставропольского края.',\n    '1.2.643.3.8.100.1.8': 'Использование в Единой системе электронной торговли B2B-Center и B2G.',\n    '1.2.643.3.8.100.1.9': 'Для участия в электронных торгах и подписания государственного контракта в  электронной площадке ОАО «ЕЭТП» уполномоченными лицами участников размещения  государственного или муниципального заказа',\n    '1.2.643.3.8.100.1.10': 'Для участия в электронных торгах и подписания государственного контракта в  информационных системах Тендерного комитета города Москвы уполномоченными  лицами участников размещения государственного заказа города Москвы',\n    '1.2.643.3.8.100.1.11': 'Подписание электронных документов в автоматизированной информационной  системе размещения государственного и муниципального заказа Саратовской области',\n    '1.2.643.3.8.100.1.12': 'Использование в системе государственного заказа Иркутской области',\n    '1.2.643.3.8.100.1.13': 'Использование в электронной торговой площадке агентства государственного  заказа Красноярского края',\n    '1.3.6.1.4.1.24138.1.1.8.1': 'Обеспечение юридической значимости в Системе \"Электронная Торговая Площадка\"',\n    '1.2.643.3.8.100.1.14': 'Использование в электронной торговой площадке \"Тендер\"',\n    '1.2.643.6.3': 'Использование в электронных торговых системах и в программном обеспечении, связанным с обменом электронных сообщений',\n    '1.2.643.2.2.34.6': 'Пользователь Центра Регистрации',\n    '1.2.643.2.39.1.1': 'Использование в программных продуктах системы \"1С:Предприятие 8\"',\n    '1.2.643.5.1.24.2.1.3': 'Формирование документов для получения государственных  услуг в сфере ведения государственного кадастра недвижимости со стороны заявителя',\n    '1.2.643.5.1.24.2.1.3.1': 'Формирование кадастровым инженером документов  для получения государственных услуг в сфере ведения государственного кадастра недвижимости со стороны  заявителя',\n    '1.2.643.5.1.24.2.2.2': 'Формирование документов как результата оказания  услуги со стороны органов регистрации прав',\n    '1.2.643.5.1.24.2.2.3': 'Формирование документов для получения государственных  услуг в сфере государственной регистрации прав на недвижимое имущество и сделок с ним со стороны заявителя',\n    '1.2.643.6.3.1.1': 'Использование на электронных площадок отобранных для проведения аукционах в электронной форме',\n    '1.2.643.6.3.1.2.1': 'Тип участника - Юридическое лицо',\n    '1.2.643.6.3.1.2.2': 'Тип участника - Физическое лицо',\n    '1.2.643.6.3.1.2.3': 'Тип участника - Индивидуальный предприниматель',\n    '1.2.643.6.3.1.3.1': 'Участник размещения заказа',\n    '1.2.643.6.3.1.4.1': 'Администратор организации',\n    '1.2.643.6.3.1.4.2': 'Уполномоченный специалист',\n    '1.2.643.6.3.1.4.3': 'Специалист с правом подписи контракта',\n    '1.3.643.3.8.100.15': 'Использование в ЭТП \"uTender\"'\n};\n\n\n// WEBPACK FOOTER //\n// ./oids.js"],"sourceRoot":""}